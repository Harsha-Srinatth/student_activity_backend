import PDFDocument from "pdfkit";
import https from "https";
import StudentDetails from "../../models/studentDetails.js";

// helper: fetch image buffer using https
function fetchImageBuffer(url) {
  return new Promise((resolve, reject) => {
    https.get(url, (res) => {
      const data = [];
      res.on("data", (chunk) => data.push(chunk));
      res.on("end", () => resolve(Buffer.concat(data)));
    }).on("error", reject);
  });
}

// --- Helper for section titles ---
function addSectionTitle(doc, title) {
  doc.moveDown(1);
  doc.fontSize(16).fillColor("#1a1a1a").text(title, { underline: true });
  doc.moveDown(0.5);
  doc.fillColor("#000000");
}

export const generateStudentPortfolioPDF = async (req, res) => {
  try {
    const { studentid } = req.params;
    const student = await StudentDetails.findOne({ studentid });

    if (!student) {
      return res.status(404).json({ message: "Student not found" });
    }

    // Create PDF
    const doc = new PDFDocument({ margin: 50 });
    const filename = `student_${studentid}.pdf`;

    // Pipe to response
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", `attachment; filename=${filename}`);
    doc.pipe(res);

    // === HEADER ===
    if (student.image?.url) {
      try {
        const imgBuffer = await fetchImageBuffer(student.image.url);
        const imgX = doc.page.width - 120;
        const imgY = 50;
        const boxSize = 80;

        doc.save();
        doc.circle(imgX + boxSize / 2, imgY + boxSize / 2, boxSize / 2).clip();
        doc.image(imgBuffer, imgX - 20, imgY - 20, {
          width: boxSize + 40,
          height: boxSize + 40,
        });
        doc.restore();
      } catch (err) {
        console.warn("Could not load student image:", err.message);
      }
    }

    // Student Name + Contact
    doc.fontSize(22).fillColor("#2c3e50").text(student.fullname, { align: "left" });
    doc.moveDown(0.3);
    doc.fontSize(12).fillColor("#555555").text(`Email: ${student.email}`);
    doc.text(`Phone: ${student.mobileno}`);
    doc.text(`Institution: ${student.institution}`);
    doc.text(`Department: ${student.dept} | Program: ${student.programName} | Semester: ${student.semester}`);
    doc.moveDown();

    // === Certifications ===
    if (student.certifications?.length > 0) {
      addSectionTitle(doc, "Certifications");
      student.certifications.forEach((cert, idx) => {
        doc.fontSize(12).list([
          `${cert.title || cert} (${cert.organization || ""})`,
        ]);
      });
    }

    // === Workshops ===
    if (student.workshops?.length > 0) {
      addSectionTitle(doc, "Workshops");
      student.workshops.forEach((ws) => {
        doc.fontSize(12).list([
          `${ws.title || ""} - ${ws.organization || ""} (${ws.date || ""})`,
        ]);
      });
    }

    // === Internships ===
    if (student.internships?.length > 0) {
      addSectionTitle(doc, "Internships");
      student.internships.forEach((intern) => {
        doc.fontSize(12).text(`â€¢ ${intern.role} at ${intern.organization}`, { continued: false });
        if (intern.startDate && intern.endDate) {
          doc.fillColor("#666666")
            .fontSize(10)
            .text(`   ${new Date(intern.startDate).toLocaleDateString()} - ${new Date(intern.endDate).toLocaleDateString()}`);
        }
        doc.moveDown(0.3);
        doc.fillColor("#000000");
      });
    }

    // === Projects ===
    if (student.projects?.length > 0) {
      addSectionTitle(doc, "Projects");
      student.projects.forEach((proj, idx) => {
        doc.fontSize(12).text(`${idx + 1}. ${proj.title}`, { underline: true });
        if (proj.description) doc.fontSize(11).text(`   ${proj.description}`);
        if (proj.technologies?.length > 0) {
          doc.fontSize(11).fillColor("#555555").text(`   Tech: ${proj.technologies.join(", ")}`);
        }
        if (proj.repoLink) {
          doc.fillColor("blue").text(`   Repo: ${proj.repoLink}`, { link: proj.repoLink, underline: true });
        }
        if (proj.demoLink) {
          doc.fillColor("blue").text(`   Demo: ${proj.demoLink}`, { link: proj.demoLink, underline: true });
        }
        doc.fillColor("#000000").moveDown(0.5);
      });
    }

    // === Footer ===
    doc.moveDown(2);
    doc.fontSize(10).fillColor("#888888")
      .text("Generated by Student Activity Portal", { align: "center" });

    // End PDF
    doc.end();
  } catch (error) {
    console.error("Error generating PDF:", error);
    res.status(500).json({ message: "Failed to generate PDF", error });
  }
};